data "http" "devx_project_data" {
  url = "${var.devx_projects_base_url}?environment=${var.environment}"
  request_headers = {
    devx-tfc-api-token = var.devx_api_token
  }
}

locals {
  project_data = jsondecode(data.http.devx_project_data.response_body).projects
}

## This  module will apply IAM admin role to the service account generated by the project-vending module
#  It comes with a condition that limits the roles it is allowed to grant to other principals to a preselected list
module "gcp_delegated_role_grant" {
  source = "./modules/gcp_iam_delegated_role_grants"
  for_each = {
    for key, value in local.project_data : key => value
    if contains(var.drg_enabled_projects, key)
  }

  project_id                            = each.value.project_id
  terraform_service_account_for_project = "serviceAccount:devx-lz-gcp-tfc-svc@${each.key}.iam.gserviceaccount.com"
  project_viewer_group                  = "group:devx-gcp-iam-role-proj_viewer-${each.value.app_name}@dnb.com"
  viewer_group_role_assignment          = var.viewer_group_role_assignment
  direct_role_grants                    = var.direct_role_grants
  delegated_role_grants                 = var.delegated_role_grants
}

# This module handles the granting of additional roles for DAP
# They need this for console access to certain service
# It is only being provided as an exception

module "exception_role_grants_for_dap" {
  source = "./modules/exception_role_grants"
  for_each = {
    for key, value in local.project_data : key => value
    if contains(var.dap_projects, key)
  }
  project_id      = each.value.project_id
  exception_group = var.dap_exception_group
  exception_roles = var.exception_roles_for_DAP
}
